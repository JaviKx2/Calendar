package es.giiis.pi.listener;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.logging.Logger;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.annotation.WebListener;


/**
 * Application Lifecycle Listener implementation class ServletContextListener
 *
 */
@WebListener
public class ServletContextListener implements javax.servlet.ServletContextListener {

	private static final Logger logger = Logger.getLogger(ServletContextListener.class.getName());
	
	private Connection conn;
	/**
	 * Default constructor. 
	 */
	public ServletContextListener() {
	}

	/**
	 * @see ServletContextListener#contextInitialized(ServletContextEvent)
	 */
	public void contextInitialized(ServletContextEvent event) {
		logger.info("Creating DB");
		Connection conn = null;
		
		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			conn = DriverManager.getConnection("jdbc:hsqldb:mem:/localhost/calendar",
					"sa",                     // username
					"");					  //password

			Statement stmt = conn.createStatement();
			
			//Init db schema
			try{
				stmt.executeUpdate("CREATE TABLE User (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ " NAME VARCHAR(40) NOT NULL, "
						+ "USERNAME VARCHAR(20) NOT NULL, "
						+ "EMAIL VARCHAR(50), "
						+ "PASSWORD VARCHAR(40))" );
				stmt.executeUpdate("CREATE TABLE Calendar (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ "NAME VARCHAR(40) NOT NULL, "
						+ "OWNER INTEGER NOT NULL, "
						+ "FOREIGN KEY (OWNER) REFERENCES USER(ID) ON DELETE CASCADE)" );
				stmt.executeUpdate("CREATE TABLE Event (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ "NAME VARCHAR(40) NOT NULL, "
						+ "STARTDATE DATE default now,"
						+ "STARTTIME TIME default '09:00:00',"
						+ "ENDTIME TIME default '10:00:00',"
						+ "ENDDATE DATE default now,"
						+ "CALENDAR INTEGER NOT NULL, "
						+ "FOREIGN KEY (CALENDAR) REFERENCES CALENDAR(ID) ON DELETE CASCADE)" );
				ServletContext sc = event.getServletContext();
				sc.setAttribute("dbConn", conn);
				
			}catch(SQLException e) {
				e.printStackTrace();
			}
			
			//init data
			stmt.executeUpdate("INSERT INTO User (name, username, password) "
							+ "VALUES('Pedro Pin', 'pedropin', 'tomcat')");
			stmt.executeUpdate("INSERT INTO User (name, username, password) "
							+ "VALUES('Ana Kin', 'anakin', 'tomcat')");
			stmt.executeUpdate("INSERT INTO Calendar (name, owner) VALUES('Calendar 01',0)");
			//stmt.executeUpdate("INSERT INTO Calendar (name, owner) VALUES('Calendar 02',0)");
			stmt.executeUpdate("INSERT INTO Calendar (name, owner) VALUES('Calendar 03',1)");
			stmt.executeUpdate("INSERT INTO Event (name, calendar) VALUES('Fiesta 01',0)");
			stmt.executeUpdate("INSERT INTO Event (name, calendar) VALUES('Fiesta 02',0)");
			stmt.executeUpdate("INSERT INTO Event (name, calendar) VALUES('Evento 01',0)");
			stmt.executeUpdate("INSERT INTO Event (name, calendar) VALUES('Evento 02',0)");
			stmt.executeUpdate("INSERT INTO Event (name, calendar) VALUES('Fiesta 03',1)");
			stmt.executeUpdate("INSERT INTO Event (name, calendar) VALUES('Fiesta 05',1)");			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}                     
		
		logger.info("DB created");
	}

	/**
	 * @see ServletContextListener#contextDestroyed(ServletContextEvent)
	 */
	public void contextDestroyed(ServletContextEvent event) {
		logger.info("Destroying DB");
		try {
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("SHUTDOWN");
			conn.close();
			
			Enumeration<Driver> drivers = DriverManager.getDrivers();
			while (drivers.hasMoreElements()) {
				Driver driver = drivers.nextElement();
				try {
					DriverManager.deregisterDriver(driver);
					logger.info(String.format("deregistering jdbc driver: %s", driver));
				} catch (SQLException e) {
					logger.severe(String.format("Error deregistering driver %s %s", driver, e));
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		logger.info("DB dstroyed");
	}

}
